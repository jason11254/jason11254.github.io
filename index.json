[{"categories":["筆記"],"contents":"IoC (Inversion of Control) - 控制反轉，將object的控制權交給Spring容器管理。\n由Spring容器管理的object則稱為bean。\nSpring IoC簡易流程   在目標class上加上@Component：\n@Component只能加在class上，使用後即可將該class變為Spring容器管理的bean。\n  @Component\rpublic class Apple {\rpublic void print(String message){\rSystem.out.println(\u0026#34;這顆蘋果，\u0026#34;+message);\r}\r} 在需要該物件的class上也加上@Component：  @Component\rpublic class Person {\r...\r}  最後使用@Autowired將bean注入物件，完成DI (Dependency Inject) - 依賴注入。\n@Autowired只能加在物件上，用於取得Spring容器中的bean。\n範例中取得了Spring容器中Apple的bean，注入物件apple。\n  @Component\rpublic class Person {\r@Autowired\rprivate Apple apple;\rpublic void myApple(){\rapple.print(\u0026#34;是我的。\u0026#34;);\r}\r}  創建main運行myApple()方法後即可看到console上的運行結果：這顆蘋果，是我的。\n而使用Spring容器建立的bean注入至物件中即是IoC的流程。\n  Spring IoC 優點：  使程式之間關聯性降低，在修改上可以不用到處尋找其他有關聯到的地方。 object的生命週期由Spring容器管理，無須工程師手動操作。  ","permalink":"https://jason11254.github.io/blog/springioc/","tags":["Java","Spring"],"title":"Spring學習筆記01-IoC簡介"}]